#!/usr/bin/env python3

import argparse
import json
import os
import re
import subprocess
import sys

#
# Global
#

cmd_description='print ceph daemon historic ops'

parser = argparse.ArgumentParser(prog='ceph-historic-ops', description=cmd_description)
parser.add_argument(
    'daemon',
    metavar='mds.x|mon.x|osd.x',
    help='print ops for this daemon',
    nargs='*',
    default=['osd'],
)
parser.add_argument(
    '-d', '--sort-by-daemon',
    action='store_true',
    help='sort by daemon',
    default=False,
)
parser.add_argument(
    '-t', '--sort-by-duration',
    action='store_true',
    help='sort by duration',
    default=False,
)

#
# Functions
#

def description():
    print(cmd_description)

def help():
    parser.print_help()

def main():
    if len(sys.argv) > 1:
        if sys.argv[1] == 'description':
            description()
            exit(0)
        elif sys.argv[1] == 'help':
            help()
            exit(0)

    args = parser.parse_args()
    historic_ops = []    

    for daemon in args.daemon:
        m = re.match(r'^(mds|mon|osd)(\.(.+))?', daemon)
        if not m:
            print(f'invalid daemon: {daemon}', file=sys.stderr)
            exit(1)
        daemon_type = m.group(1)
        many = False
        if m.group(3):
            daemon = f'{m.group(1)}.{m.group(3)}'
            if m.group(3) == '*':
                many = True
        else:
            daemon = f'{daemon_type}.*'
            many = True

        result = subprocess.run(['ceph', 'tell', daemon, 'dump_historic_ops',
                                 '--format', 'json'],
                                stdout=subprocess.PIPE,
                                stderr=subprocess.PIPE,
                                text=True)
        if result.returncode != 0:
            print(
                f'ceph tell {daemon} dump_historic_ops failed: {result.stderr}',
                file=sys.stderr
            )
            exit(1)
        if many:
            for line in result.stdout.split('\n'):
                if not line:
                    continue
                m = re.match(r'^(mds|mon|osd)\.(.+): +({.*)$', line)
                if not m:
                    print(f'skipping: {line}', file=sys.stderr)
                    continue
                daemon = f'{m.group(1)}.{m.group(2)}'
                ops = json.loads(m.group(3))
                historic_ops.extend([dict({'daemon' : daemon}, **x) for x in ops['ops']])
        else:
            ops = json.loads(result.stdout)
            historic_ops.extend([dict({'daemon' : daemon}, **x) for x in ops['ops']])

    if args.sort_by_duration:
        historic_ops.sort(key=lambda op: op['duration'], reverse=True)

    if args.sort_by_daemon:
        historic_ops.sort(key=lambda op: op['daemon'])

    try:
        for op in historic_ops:
            print('%-8s %1.3f %s %s' % (op['daemon'], op['duration'],
                                        op['initiated_at'], op['description']))
            sys.stdout.flush()
    except IOError as e:
        pass

#
# main
#

main()
