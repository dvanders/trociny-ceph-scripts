#!/usr/bin/env python

import argparse
import re
import sys

#
# Functions
#

def parse_args():
    parser = argparse.ArgumentParser(
        description='process log file generated by "iostat -x -t -p {PERIOD} {COUNT}" command'
        )
    parser.add_argument(
        'key',
        help='statistics key to look for',
        )
    args = parser.parse_args()
    return args

def main():
    ctx = parse_args()

    # 07/27/15 11:59:24
    # avg-cpu:  %user   %nice %system %iowait  %steal   %idle
    #            3.95    0.00    1.24    7.85    0.00   86.96
    #
    # Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util
    # sdf               0.00  1174.00    0.60   18.40    24.80  4769.60   504.67     1.53   80.42    1.33   83.00   1.56   2.96
    # ...

    time_r  = re.compile('^\s*(\d\d/\d\d/\d\d \d\d:\d\d:\d\d)\s*$')
    cols_r = re.compile('^\s*Device:\s+(.+)$')
    data_r  = re.compile('^\s*(sd[a-z])\s+(.+)$')

    time = ''
    i    = 0
    res  = {}
    for line in sys.stdin:
        m = time_r.match(line)
        if m:
            time = m.group(1)
            if not res.get(time):
                res[time] = {}
            continue
        m = cols_r.match(line)
        if m:
            try:
                i = m.group(1).split().index(ctx.key)
            except ValueError as e:
                print >> sys.stderr, e.message
                print >> sys.stderr, 'possible keys:', m.group(1).split()
                exit(1)
            continue
        m = data_r.match(line)
        if m:
            res[time][m.group(1)] = m.group(2).split()[i]
            continue
    disks = None
    print "#", ctx.key
    for time in sorted(res.keys()):
        if not disks:
            disks = sorted(res[time].keys())
            print("#%s\t%s" % ('date time'.ljust(len(time) - 1), "\t".join(disks)))
        line = time
        for disk in disks:
            line += "\t" + res[time][disk]
        print line

#
# Main
#

main()
